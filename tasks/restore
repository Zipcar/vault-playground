#!/usr/bin/env bash

# Vault Playground V2.0.0 restore
#
# Unless a snapshot file is specified this script will list all snapshots in its cache and prompt the user to select one.
# Once the snapshot is restored the script will attempt to locate a valid initialization dump file in its cache if one
# was not passed in. If it is able to find one it will attempt to automatically unseal Vault. If it is unable to do so it
# will notify the user who would have to manually unseal the Vault instances. Even if the Vault is not able to be unsealed
# the snapshot will still be restored.
#

: "${VP_NAMESPACE:=vp}" # Namespace for the local Vault playground, used for network and container names

vp_init_cache=$HOME/.vault-playground/init_dumps
vp_snapshot_cache=$HOME/.vault-playground/snapshots
default_consul_target=http://127.0.0.1:$(docker inspect --format='{{(index (index .NetworkSettings.Ports "8500/tcp") 0).HostPort}}' ${VP_NAMESPACE}-consul1)

: "${VP_CONSUL_TARGET:=$default_consul_target}"
: "${VP_VAULT_TARGETS:=}"
: "${VP_SNAPSHOT:=}"
: "${VP_INIT_DUMP:=}"

vault_targets=(${VP_VAULT_TARGETS});

if [ $(docker network ls -f name=${VP_NAMESPACE} -q) ] && [ ${VP_CONSUL_TARGET} == ${default_consul_target} ]; then
  echo "Looks like you're trying to run a local restore but there's currently some Vault Playground infrastructure"
  echo "running in Docker's $VP_NAMESPACE network. Before running restore please run destroy. DO NOT RUN PURGE."
  echo "You can also restore to a remote Consul server by passing in VP_CONSUL_TARGET"
  exit 0
fi

if [ ! -d "${vp_snapshot_cache}" ] && [ ! ${VP_SNAPSHOT} ]; then
  echo "No snapshots available in snapshot cache: $vp_snapshot_cache, or passed in via VP_SNAPSHOT."
  echo "Have you taken any snapshots?"
  exit 0
fi

if [ ! $(command -v docker) ]; then
  echo -e "\ndocker not found! It must be installed before proceeding: https://www.docker.com/get-docker\n"
  exit 1
fi

if [ ! $(command -v jq) ]; then
  echo -e "\njq not found! It must be installed before proceeding: https://stedolan.github.io/jq/\n"
  exit 1
fi

if [ ! $(command -v curl) ]; then
  echo -e "\ncurl not found! It must be installed before proceeding: https://curl.haxx.se/\n"
  exit 1
fi

declare snapshot_path

if [ ${VP_SNAPSHOT} ]; then
  snapshot_path=${VP_SNAPSHOT}
else
  options=(${vp_snapshot_cache}/*)

  PS3="Please select a snapshot to restore: "
  select snapshot_path in "${options[@]}" "Cancel" ; do
    if (( REPLY == 1 + ${#options[@]} )) ; then
      exit 0
    elif (( REPLY > 0 && REPLY <= ${#options[@]} )) ; then
      echo "Restoring $snapshot_path..."
      break
    else
      echo "Restore cancelled..."
      exit 0
    fi
  done
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Only initialize an environment if we're working locally and an external Consul node was not targeted
if [ ${VP_CONSUL_TARGET} == ${default_consul_target} ]; then
  VP_AUTO_INIT=false ${DIR}/init
fi

curl --request PUT --data-binary @${snapshot_path} ${VP_CONSUL_TARGET}/v1/snapshot

declare snapshot_init_dump

# This short ID will be valid for local Docker inits only
vault_short_id=$(basename ${snapshot_path} | cut -c1-12)

if [ -e "${vp_init_cache}/${vault_short_id}.json" ]; then
  snapshot_init_dump=${vp_init_cache}/${vault_short_id}.json
elif [ ${VP_INIT_DUMP} ]; then
  snapshot_init_dump=${VP_INIT_DUMP}
else
  echo "A Vault initialization key dump was not passed in with VP_INIT_DUMP or found in the local cache $vp_init_cache"
  echo "Vault will need to be manually unsealed. Hope you've got the keys!"
fi


if [ ${snapshot_init_dump} ]; then
  # If Vault targets were passed in then connect to each targets unseal API endpoint
  # It's not recommended to use this auto unsealing behavior for any production Vault
  if [ ${VP_VAULT_TARGETS} ]; then
    for ((i=0; i<${#vault_targets[@]}; ++i)); do
      jq -r '.keys[]' ${snapshot_init_dump} | xargs -I % curl --request PUT  -H "Content-Type: application/json" -d '{"key": "%"}' ${vault_targets[$i]}/v1/sys/unseal
      curl ${vault_targets[$i]}/v1/sys/health
    done
  else
    containers=$(docker ps --filter name=${VP_NAMESPACE}-vault | awk '{if(NR>1) print $NF}')
    for container in ${containers}
    do
      jq -r '.keys[]' ${snapshot_init_dump} | xargs -I % docker exec ${container} vault unseal %
    done
  fi

  # Establish a new base init dump based on previous init dump
  new_vault_short_id=$(docker ps -q -f name=${VP_NAMESPACE}-vault1)
  new_init_dump_path=${vp_init_cache}/${new_vault_short_id}.json
  cp ${snapshot_init_dump} ${new_init_dump_path}
  echo "Vault Initialization information dumped to: $new_init_dump_path"
  echo "Root Token:"
  jq -r '.root_token' ${new_init_dump_path}
fi